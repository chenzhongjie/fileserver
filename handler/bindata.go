// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package main generated by go-bindata.// sources:
// html/upload_form.html
package handler

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlUpload_formHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x50\xcb\x6a\xeb\x40\x0c\xdd\xfb\x2b\x84\xd6\xf7\x66\xb2\x28\x25\xb8\x33\xee\x1f\xb4\x85\x16\xba\x96\x6d\x39\x1e\x32\x2f\xc6\xb2\x21\x18\xff\x7b\xb1\x27\x74\xd7\x9d\x38\xd2\x79\x49\x8f\xe2\x5d\x53\xe9\x91\xa9\x6f\x2a\x00\x00\x2d\x56\x1c\x37\x83\x75\x0c\x13\xe7\x85\xb3\x56\x05\x2a\x6b\x67\xc3\x0d\x32\x3b\x83\xb6\x8b\x01\x61\xcc\x3c\x18\xec\x49\xa8\xb6\x9e\xae\xac\x6c\x17\x5f\x5a\x9a\xf8\xf9\xe9\x1f\x7d\xbf\x2d\xd8\x54\x5a\x15\x79\xdd\xc6\xfe\xfe\x90\x19\x62\xf6\xc0\xa1\x93\x7b\x62\x83\x7e\x76\x62\x13\x65\x51\x3b\xfe\x7f\x57\x43\xa0\x4e\x6c\x0c\x06\x47\x91\x54\x2b\xb5\xae\x27\x9b\xb6\xad\xbe\x9c\x2f\x67\x95\xe8\xca\xaf\x12\x6f\x1c\xcc\xba\x9e\x8e\x61\xdb\x10\x3c\xcb\x18\x7b\x83\x1f\xef\x9f\x5f\x58\x9c\x0e\x37\x1b\xd2\x2c\x50\xbc\xf6\x66\x08\x81\x3c\x1b\x9c\x93\x8b\xd4\x17\xa4\x64\x70\xac\xfe\xe0\x4d\x73\xeb\xad\x20\x2c\xe4\xe6\x5f\x2a\xc2\xe3\x5c\x1f\xc9\xf7\xae\xa5\xa4\x56\xe5\xb3\x3f\x01\x00\x00\xff\xff\xe8\x0b\x04\xac\x61\x01\x00\x00")

func htmlUpload_formHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlUpload_formHtml,
		"html/upload_form.html",
	)
}

func htmlUpload_formHtml() (*asset, error) {
	bytes, err := htmlUpload_formHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/upload_form.html", size: 353, mode: os.FileMode(420), modTime: time.Unix(1615049781, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/upload_form.html": htmlUpload_formHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"upload_form.html": &bintree{htmlUpload_formHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
